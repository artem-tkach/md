/*
 * This file is generated by jOOQ.
 */
package io.skai.accounting.jooq.tables.daos;


import io.skai.accounting.jooq.tables.Order;
import io.skai.accounting.jooq.tables.records.OrderRecord;

import java.time.LocalDateTime;
import java.util.List;
import java.util.Optional;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class OrderDao extends DAOImpl<OrderRecord, io.skai.accounting.jooq.tables.pojos.Order, Long> {

    /**
     * Create a new OrderDao without any configuration
     */
    public OrderDao() {
        super(Order.ORDER, io.skai.accounting.jooq.tables.pojos.Order.class);
    }

    /**
     * Create a new OrderDao with an attached configuration
     */
    public OrderDao(Configuration configuration) {
        super(Order.ORDER, io.skai.accounting.jooq.tables.pojos.Order.class, configuration);
    }

    @Override
    public Long getId(io.skai.accounting.jooq.tables.pojos.Order object) {
        return object.getId();
    }

    /**
     * Fetch records that have <code>id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<io.skai.accounting.jooq.tables.pojos.Order> fetchRangeOfId(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(Order.ORDER.ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    public List<io.skai.accounting.jooq.tables.pojos.Order> fetchById(Long... values) {
        return fetch(Order.ORDER.ID, values);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public io.skai.accounting.jooq.tables.pojos.Order fetchOneById(Long value) {
        return fetchOne(Order.ORDER.ID, value);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public Optional<io.skai.accounting.jooq.tables.pojos.Order> fetchOptionalById(Long value) {
        return fetchOptional(Order.ORDER.ID, value);
    }

    /**
     * Fetch records that have <code>client_id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<io.skai.accounting.jooq.tables.pojos.Order> fetchRangeOfClientId(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(Order.ORDER.CLIENT_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>client_id IN (values)</code>
     */
    public List<io.skai.accounting.jooq.tables.pojos.Order> fetchByClientId(Long... values) {
        return fetch(Order.ORDER.CLIENT_ID, values);
    }

    /**
     * Fetch records that have <code>model_id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<io.skai.accounting.jooq.tables.pojos.Order> fetchRangeOfModelId(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(Order.ORDER.MODEL_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>model_id IN (values)</code>
     */
    public List<io.skai.accounting.jooq.tables.pojos.Order> fetchByModelId(Long... values) {
        return fetch(Order.ORDER.MODEL_ID, values);
    }

    /**
     * Fetch records that have <code>serial_number BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<io.skai.accounting.jooq.tables.pojos.Order> fetchRangeOfSerialNumber(String lowerInclusive, String upperInclusive) {
        return fetchRange(Order.ORDER.SERIAL_NUMBER, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>serial_number IN (values)</code>
     */
    public List<io.skai.accounting.jooq.tables.pojos.Order> fetchBySerialNumber(String... values) {
        return fetch(Order.ORDER.SERIAL_NUMBER, values);
    }

    /**
     * Fetch records that have <code>defect BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<io.skai.accounting.jooq.tables.pojos.Order> fetchRangeOfDefect(String lowerInclusive, String upperInclusive) {
        return fetchRange(Order.ORDER.DEFECT, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>defect IN (values)</code>
     */
    public List<io.skai.accounting.jooq.tables.pojos.Order> fetchByDefect(String... values) {
        return fetch(Order.ORDER.DEFECT, values);
    }

    /**
     * Fetch records that have <code>manager_id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<io.skai.accounting.jooq.tables.pojos.Order> fetchRangeOfManagerId(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(Order.ORDER.MANAGER_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>manager_id IN (values)</code>
     */
    public List<io.skai.accounting.jooq.tables.pojos.Order> fetchByManagerId(Long... values) {
        return fetch(Order.ORDER.MANAGER_ID, values);
    }

    /**
     * Fetch records that have <code>date BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<io.skai.accounting.jooq.tables.pojos.Order> fetchRangeOfDate(LocalDateTime lowerInclusive, LocalDateTime upperInclusive) {
        return fetchRange(Order.ORDER.DATE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>date IN (values)</code>
     */
    public List<io.skai.accounting.jooq.tables.pojos.Order> fetchByDate(LocalDateTime... values) {
        return fetch(Order.ORDER.DATE, values);
    }
}
