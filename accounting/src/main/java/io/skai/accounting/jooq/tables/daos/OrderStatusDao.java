/*
 * This file is generated by jOOQ.
 */
package io.skai.accounting.jooq.tables.daos;


import io.skai.accounting.jooq.tables.OrderStatus;
import io.skai.accounting.jooq.tables.records.OrderStatusRecord;

import java.time.LocalDateTime;
import java.util.List;
import java.util.Optional;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class OrderStatusDao extends DAOImpl<OrderStatusRecord, io.skai.accounting.jooq.tables.pojos.OrderStatus, Long> {

    /**
     * Create a new OrderStatusDao without any configuration
     */
    public OrderStatusDao() {
        super(OrderStatus.ORDER_STATUS, io.skai.accounting.jooq.tables.pojos.OrderStatus.class);
    }

    /**
     * Create a new OrderStatusDao with an attached configuration
     */
    public OrderStatusDao(Configuration configuration) {
        super(OrderStatus.ORDER_STATUS, io.skai.accounting.jooq.tables.pojos.OrderStatus.class, configuration);
    }

    @Override
    public Long getId(io.skai.accounting.jooq.tables.pojos.OrderStatus object) {
        return object.getId();
    }

    /**
     * Fetch records that have <code>id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<io.skai.accounting.jooq.tables.pojos.OrderStatus> fetchRangeOfId(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(OrderStatus.ORDER_STATUS.ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    public List<io.skai.accounting.jooq.tables.pojos.OrderStatus> fetchById(Long... values) {
        return fetch(OrderStatus.ORDER_STATUS.ID, values);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public io.skai.accounting.jooq.tables.pojos.OrderStatus fetchOneById(Long value) {
        return fetchOne(OrderStatus.ORDER_STATUS.ID, value);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public Optional<io.skai.accounting.jooq.tables.pojos.OrderStatus> fetchOptionalById(Long value) {
        return fetchOptional(OrderStatus.ORDER_STATUS.ID, value);
    }

    /**
     * Fetch records that have <code>order_id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<io.skai.accounting.jooq.tables.pojos.OrderStatus> fetchRangeOfOrderId(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(OrderStatus.ORDER_STATUS.ORDER_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>order_id IN (values)</code>
     */
    public List<io.skai.accounting.jooq.tables.pojos.OrderStatus> fetchByOrderId(Long... values) {
        return fetch(OrderStatus.ORDER_STATUS.ORDER_ID, values);
    }

    /**
     * Fetch records that have <code>status BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<io.skai.accounting.jooq.tables.pojos.OrderStatus> fetchRangeOfStatus(String lowerInclusive, String upperInclusive) {
        return fetchRange(OrderStatus.ORDER_STATUS.STATUS, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>status IN (values)</code>
     */
    public List<io.skai.accounting.jooq.tables.pojos.OrderStatus> fetchByStatus(String... values) {
        return fetch(OrderStatus.ORDER_STATUS.STATUS, values);
    }

    /**
     * Fetch records that have <code>date BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<io.skai.accounting.jooq.tables.pojos.OrderStatus> fetchRangeOfDate(LocalDateTime lowerInclusive, LocalDateTime upperInclusive) {
        return fetchRange(OrderStatus.ORDER_STATUS.DATE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>date IN (values)</code>
     */
    public List<io.skai.accounting.jooq.tables.pojos.OrderStatus> fetchByDate(LocalDateTime... values) {
        return fetch(OrderStatus.ORDER_STATUS.DATE, values);
    }
}
