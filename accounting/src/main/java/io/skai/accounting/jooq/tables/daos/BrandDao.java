/*
 * This file is generated by jOOQ.
 */
package io.skai.accounting.jooq.tables.daos;


import io.skai.accounting.jooq.tables.Brand;
import io.skai.accounting.jooq.tables.records.BrandRecord;

import java.util.List;
import java.util.Optional;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class BrandDao extends DAOImpl<BrandRecord, io.skai.accounting.jooq.tables.pojos.Brand, Long> {

    /**
     * Create a new BrandDao without any configuration
     */
    public BrandDao() {
        super(Brand.BRAND, io.skai.accounting.jooq.tables.pojos.Brand.class);
    }

    /**
     * Create a new BrandDao with an attached configuration
     */
    public BrandDao(Configuration configuration) {
        super(Brand.BRAND, io.skai.accounting.jooq.tables.pojos.Brand.class, configuration);
    }

    @Override
    public Long getId(io.skai.accounting.jooq.tables.pojos.Brand object) {
        return object.getId();
    }

    /**
     * Fetch records that have <code>id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<io.skai.accounting.jooq.tables.pojos.Brand> fetchRangeOfId(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(Brand.BRAND.ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    public List<io.skai.accounting.jooq.tables.pojos.Brand> fetchById(Long... values) {
        return fetch(Brand.BRAND.ID, values);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public io.skai.accounting.jooq.tables.pojos.Brand fetchOneById(Long value) {
        return fetchOne(Brand.BRAND.ID, value);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public Optional<io.skai.accounting.jooq.tables.pojos.Brand> fetchOptionalById(Long value) {
        return fetchOptional(Brand.BRAND.ID, value);
    }

    /**
     * Fetch records that have <code>name BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<io.skai.accounting.jooq.tables.pojos.Brand> fetchRangeOfName(String lowerInclusive, String upperInclusive) {
        return fetchRange(Brand.BRAND.NAME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>name IN (values)</code>
     */
    public List<io.skai.accounting.jooq.tables.pojos.Brand> fetchByName(String... values) {
        return fetch(Brand.BRAND.NAME, values);
    }

    /**
     * Fetch a unique record that has <code>name = value</code>
     */
    public io.skai.accounting.jooq.tables.pojos.Brand fetchOneByName(String value) {
        return fetchOne(Brand.BRAND.NAME, value);
    }

    /**
     * Fetch a unique record that has <code>name = value</code>
     */
    public Optional<io.skai.accounting.jooq.tables.pojos.Brand> fetchOptionalByName(String value) {
        return fetchOptional(Brand.BRAND.NAME, value);
    }
}
