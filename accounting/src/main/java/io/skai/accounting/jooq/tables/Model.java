/*
 * This file is generated by jOOQ.
 */
package io.skai.accounting.jooq.tables;


import io.skai.accounting.jooq.Keys;
import io.skai.accounting.jooq.MobileAccounting;
import io.skai.accounting.jooq.tables.records.ModelRecord;
import org.jooq.Record;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import java.util.function.Function;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Model extends TableImpl<ModelRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>mobile_accounting.model</code>
     */
    public static final Model MODEL = new Model();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ModelRecord> getRecordType() {
        return ModelRecord.class;
    }

    /**
     * The column <code>mobile_accounting.model.id</code>.
     */
    public final TableField<ModelRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>mobile_accounting.model.brand_id</code>.
     */
    public final TableField<ModelRecord, Long> BRAND_ID = createField(DSL.name("brand_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>mobile_accounting.model.name</code>.
     */
    public final TableField<ModelRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    private Model(Name alias, Table<ModelRecord> aliased) {
        this(alias, aliased, null);
    }

    private Model(Name alias, Table<ModelRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>mobile_accounting.model</code> table reference
     */
    public Model(String alias) {
        this(DSL.name(alias), MODEL);
    }

    /**
     * Create an aliased <code>mobile_accounting.model</code> table reference
     */
    public Model(Name alias) {
        this(alias, MODEL);
    }

    /**
     * Create a <code>mobile_accounting.model</code> table reference
     */
    public Model() {
        this(DSL.name("model"), null);
    }

    public <O extends Record> Model(Table<O> child, ForeignKey<O, ModelRecord> key) {
        super(child, key, MODEL);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : MobileAccounting.MOBILE_ACCOUNTING;
    }

    @Override
    public Identity<ModelRecord, Long> getIdentity() {
        return (Identity<ModelRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<ModelRecord> getPrimaryKey() {
        return Keys.KEY_MODEL_PRIMARY;
    }

    @Override
    public Model as(String alias) {
        return new Model(DSL.name(alias), this);
    }

    @Override
    public Model as(Name alias) {
        return new Model(alias, this);
    }

    @Override
    public Model as(Table<?> alias) {
        return new Model(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Model rename(String name) {
        return new Model(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Model rename(Name name) {
        return new Model(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Model rename(Table<?> name) {
        return new Model(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<Long, Long, String> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function3<? super Long, ? super Long, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function3<? super Long, ? super Long, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
