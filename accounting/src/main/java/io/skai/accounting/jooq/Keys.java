/*
 * This file is generated by jOOQ.
 */
package io.skai.accounting.jooq;


import io.skai.accounting.jooq.tables.Brand;
import io.skai.accounting.jooq.tables.Client;
import io.skai.accounting.jooq.tables.Model;
import io.skai.accounting.jooq.tables.Order;
import io.skai.accounting.jooq.tables.OrderStatus;
import io.skai.accounting.jooq.tables.Repair;
import io.skai.accounting.jooq.tables.User;
import io.skai.accounting.jooq.tables.records.BrandRecord;
import io.skai.accounting.jooq.tables.records.ClientRecord;
import io.skai.accounting.jooq.tables.records.ModelRecord;
import io.skai.accounting.jooq.tables.records.OrderRecord;
import io.skai.accounting.jooq.tables.records.OrderStatusRecord;
import io.skai.accounting.jooq.tables.records.RepairRecord;
import io.skai.accounting.jooq.tables.records.UserRecord;

import org.jooq.ForeignKey;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;


/**
 * A class modelling foreign key relationships and constraints of tables in
 * mobile_accounting.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Keys {

    // -------------------------------------------------------------------------
    // UNIQUE and PRIMARY KEY definitions
    // -------------------------------------------------------------------------

    public static final UniqueKey<BrandRecord> KEY_BRAND_NAME = Internal.createUniqueKey(Brand.BRAND, DSL.name("KEY_brand_name"), new TableField[] { Brand.BRAND.NAME }, true);
    public static final UniqueKey<BrandRecord> KEY_BRAND_PRIMARY = Internal.createUniqueKey(Brand.BRAND, DSL.name("KEY_brand_PRIMARY"), new TableField[] { Brand.BRAND.ID }, true);
    public static final UniqueKey<ClientRecord> KEY_CLIENT_E_MAIL = Internal.createUniqueKey(Client.CLIENT, DSL.name("KEY_client_e-mail"), new TableField[] { Client.CLIENT.EMAIL }, true);
    public static final UniqueKey<ClientRecord> KEY_CLIENT_PRIMARY = Internal.createUniqueKey(Client.CLIENT, DSL.name("KEY_client_PRIMARY"), new TableField[] { Client.CLIENT.ID }, true);
    public static final UniqueKey<ModelRecord> KEY_MODEL_PRIMARY = Internal.createUniqueKey(Model.MODEL, DSL.name("KEY_model_PRIMARY"), new TableField[] { Model.MODEL.ID }, true);
    public static final UniqueKey<OrderRecord> KEY_ORDER_GUID = Internal.createUniqueKey(Order.ORDER, DSL.name("KEY_order_guid"), new TableField[] { Order.ORDER.GUID }, true);
    public static final UniqueKey<OrderRecord> KEY_ORDER_PRIMARY = Internal.createUniqueKey(Order.ORDER, DSL.name("KEY_order_PRIMARY"), new TableField[] { Order.ORDER.ID }, true);
    public static final UniqueKey<OrderStatusRecord> KEY_ORDER_STATUS_PRIMARY = Internal.createUniqueKey(OrderStatus.ORDER_STATUS, DSL.name("KEY_order_status_PRIMARY"), new TableField[] { OrderStatus.ORDER_STATUS.ID }, true);
    public static final UniqueKey<RepairRecord> KEY_REPAIR_PRIMARY = Internal.createUniqueKey(Repair.REPAIR, DSL.name("KEY_repair_PRIMARY"), new TableField[] { Repair.REPAIR.ID }, true);
    public static final UniqueKey<UserRecord> KEY_USER_EMAIL = Internal.createUniqueKey(User.USER, DSL.name("KEY_user_email"), new TableField[] { User.USER.EMAIL }, true);
    public static final UniqueKey<UserRecord> KEY_USER_PRIMARY = Internal.createUniqueKey(User.USER, DSL.name("KEY_user_PRIMARY"), new TableField[] { User.USER.ID }, true);

    // -------------------------------------------------------------------------
    // FOREIGN KEY definitions
    // -------------------------------------------------------------------------

    public static final ForeignKey<OrderRecord, UserRecord> FK_MANAGER_USER = Internal.createForeignKey(Order.ORDER, DSL.name("fk_manager_user"), new TableField[] { Order.ORDER.MANAGER_ID }, Keys.KEY_USER_PRIMARY, new TableField[] { User.USER.ID }, true);
}
