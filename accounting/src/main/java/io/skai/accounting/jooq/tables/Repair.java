/*
 * This file is generated by jOOQ.
 */
package io.skai.accounting.jooq.tables;


import io.skai.accounting.jooq.Keys;
import io.skai.accounting.jooq.MobileAccounting;
import io.skai.accounting.jooq.tables.records.RepairRecord;

import java.time.LocalDateTime;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function7;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row7;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Repair extends TableImpl<RepairRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>mobile_accounting.repair</code>
     */
    public static final Repair REPAIR = new Repair();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<RepairRecord> getRecordType() {
        return RepairRecord.class;
    }

    /**
     * The column <code>mobile_accounting.repair.id</code>.
     */
    public final TableField<RepairRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>mobile_accounting.repair.date</code>.
     */
    public final TableField<RepairRecord, LocalDateTime> DATE = createField(DSL.name("date"), SQLDataType.LOCALDATETIME(0).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>mobile_accounting.repair.order_id</code>.
     */
    public final TableField<RepairRecord, Long> ORDER_ID = createField(DSL.name("order_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>mobile_accounting.repair.master_id</code>.
     */
    public final TableField<RepairRecord, Long> MASTER_ID = createField(DSL.name("master_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>mobile_accounting.repair.result</code>.
     */
    public final TableField<RepairRecord, String> RESULT = createField(DSL.name("result"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>mobile_accounting.repair.sum</code>.
     */
    public final TableField<RepairRecord, Double> SUM = createField(DSL.name("sum"), SQLDataType.DOUBLE.nullable(false), this, "");

    /**
     * The column <code>mobile_accounting.repair.comment</code>.
     */
    public final TableField<RepairRecord, String> COMMENT = createField(DSL.name("comment"), SQLDataType.CLOB, this, "");

    private Repair(Name alias, Table<RepairRecord> aliased) {
        this(alias, aliased, null);
    }

    private Repair(Name alias, Table<RepairRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>mobile_accounting.repair</code> table reference
     */
    public Repair(String alias) {
        this(DSL.name(alias), REPAIR);
    }

    /**
     * Create an aliased <code>mobile_accounting.repair</code> table reference
     */
    public Repair(Name alias) {
        this(alias, REPAIR);
    }

    /**
     * Create a <code>mobile_accounting.repair</code> table reference
     */
    public Repair() {
        this(DSL.name("repair"), null);
    }

    public <O extends Record> Repair(Table<O> child, ForeignKey<O, RepairRecord> key) {
        super(child, key, REPAIR);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : MobileAccounting.MOBILE_ACCOUNTING;
    }

    @Override
    public Identity<RepairRecord, Long> getIdentity() {
        return (Identity<RepairRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<RepairRecord> getPrimaryKey() {
        return Keys.KEY_REPAIR_PRIMARY;
    }

    @Override
    public Repair as(String alias) {
        return new Repair(DSL.name(alias), this);
    }

    @Override
    public Repair as(Name alias) {
        return new Repair(alias, this);
    }

    @Override
    public Repair as(Table<?> alias) {
        return new Repair(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Repair rename(String name) {
        return new Repair(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Repair rename(Name name) {
        return new Repair(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Repair rename(Table<?> name) {
        return new Repair(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row7 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row7<Long, LocalDateTime, Long, Long, String, Double, String> fieldsRow() {
        return (Row7) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function7<? super Long, ? super LocalDateTime, ? super Long, ? super Long, ? super String, ? super Double, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function7<? super Long, ? super LocalDateTime, ? super Long, ? super Long, ? super String, ? super Double, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
