/*
 * This file is generated by jOOQ.
 */
package io.skai.accounting.jooq.tables;


import io.skai.accounting.jooq.Keys;
import io.skai.accounting.jooq.MobileAccounting;
import io.skai.accounting.jooq.tables.records.OrderRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row8;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Order extends TableImpl<OrderRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>mobile_accounting.order</code>
     */
    public static final Order ORDER = new Order();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<OrderRecord> getRecordType() {
        return OrderRecord.class;
    }

    /**
     * The column <code>mobile_accounting.order.id</code>.
     */
    public final TableField<OrderRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>mobile_accounting.order.client_id</code>.
     */
    public final TableField<OrderRecord, Long> CLIENT_ID = createField(DSL.name("client_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>mobile_accounting.order.model_id</code>.
     */
    public final TableField<OrderRecord, Long> MODEL_ID = createField(DSL.name("model_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>mobile_accounting.order.serial_number</code>.
     */
    public final TableField<OrderRecord, String> SERIAL_NUMBER = createField(DSL.name("serial_number"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>mobile_accounting.order.defect</code>.
     */
    public final TableField<OrderRecord, String> DEFECT = createField(DSL.name("defect"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>mobile_accounting.order.manager_id</code>.
     */
    public final TableField<OrderRecord, Long> MANAGER_ID = createField(DSL.name("manager_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>mobile_accounting.order.date</code>.
     */
    public final TableField<OrderRecord, LocalDateTime> DATE = createField(DSL.name("date"), SQLDataType.LOCALDATETIME(0), this, "");

    /**
     * The column <code>mobile_accounting.order.guid</code>.
     */
    public final TableField<OrderRecord, String> GUID = createField(DSL.name("guid"), SQLDataType.VARCHAR(68).nullable(false), this, "");

    private Order(Name alias, Table<OrderRecord> aliased) {
        this(alias, aliased, null);
    }

    private Order(Name alias, Table<OrderRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>mobile_accounting.order</code> table reference
     */
    public Order(String alias) {
        this(DSL.name(alias), ORDER);
    }

    /**
     * Create an aliased <code>mobile_accounting.order</code> table reference
     */
    public Order(Name alias) {
        this(alias, ORDER);
    }

    /**
     * Create a <code>mobile_accounting.order</code> table reference
     */
    public Order() {
        this(DSL.name("order"), null);
    }

    public <O extends Record> Order(Table<O> child, ForeignKey<O, OrderRecord> key) {
        super(child, key, ORDER);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : MobileAccounting.MOBILE_ACCOUNTING;
    }

    @Override
    public Identity<OrderRecord, Long> getIdentity() {
        return (Identity<OrderRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<OrderRecord> getPrimaryKey() {
        return Keys.KEY_ORDER_PRIMARY;
    }

    @Override
    public List<UniqueKey<OrderRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.KEY_ORDER_GUID);
    }

    @Override
    public List<ForeignKey<OrderRecord, ?>> getReferences() {
        return Arrays.asList(Keys.FK_MANAGER_USER);
    }

    private transient User _user;

    /**
     * Get the implicit join path to the <code>mobile_accounting.user</code>
     * table.
     */
    public User user() {
        if (_user == null)
            _user = new User(this, Keys.FK_MANAGER_USER);

        return _user;
    }

    @Override
    public Order as(String alias) {
        return new Order(DSL.name(alias), this);
    }

    @Override
    public Order as(Name alias) {
        return new Order(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Order rename(String name) {
        return new Order(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Order rename(Name name) {
        return new Order(name, null);
    }

    // -------------------------------------------------------------------------
    // Row8 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row8<Long, Long, Long, String, String, Long, LocalDateTime, String> fieldsRow() {
        return (Row8) super.fieldsRow();
    }
}
