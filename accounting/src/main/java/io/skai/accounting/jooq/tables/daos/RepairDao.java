/*
 * This file is generated by jOOQ.
 */
package io.skai.accounting.jooq.tables.daos;


import io.skai.accounting.jooq.tables.Repair;
import io.skai.accounting.jooq.tables.records.RepairRecord;

import java.time.LocalDateTime;
import java.util.List;
import java.util.Optional;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class RepairDao extends DAOImpl<RepairRecord, io.skai.accounting.jooq.tables.pojos.Repair, Long> {

    /**
     * Create a new RepairDao without any configuration
     */
    public RepairDao() {
        super(Repair.REPAIR, io.skai.accounting.jooq.tables.pojos.Repair.class);
    }

    /**
     * Create a new RepairDao with an attached configuration
     */
    public RepairDao(Configuration configuration) {
        super(Repair.REPAIR, io.skai.accounting.jooq.tables.pojos.Repair.class, configuration);
    }

    @Override
    public Long getId(io.skai.accounting.jooq.tables.pojos.Repair object) {
        return object.getId();
    }

    /**
     * Fetch records that have <code>id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<io.skai.accounting.jooq.tables.pojos.Repair> fetchRangeOfId(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(Repair.REPAIR.ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    public List<io.skai.accounting.jooq.tables.pojos.Repair> fetchById(Long... values) {
        return fetch(Repair.REPAIR.ID, values);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public io.skai.accounting.jooq.tables.pojos.Repair fetchOneById(Long value) {
        return fetchOne(Repair.REPAIR.ID, value);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public Optional<io.skai.accounting.jooq.tables.pojos.Repair> fetchOptionalById(Long value) {
        return fetchOptional(Repair.REPAIR.ID, value);
    }

    /**
     * Fetch records that have <code>date BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<io.skai.accounting.jooq.tables.pojos.Repair> fetchRangeOfDate(LocalDateTime lowerInclusive, LocalDateTime upperInclusive) {
        return fetchRange(Repair.REPAIR.DATE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>date IN (values)</code>
     */
    public List<io.skai.accounting.jooq.tables.pojos.Repair> fetchByDate(LocalDateTime... values) {
        return fetch(Repair.REPAIR.DATE, values);
    }

    /**
     * Fetch records that have <code>order_id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<io.skai.accounting.jooq.tables.pojos.Repair> fetchRangeOfOrderId(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(Repair.REPAIR.ORDER_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>order_id IN (values)</code>
     */
    public List<io.skai.accounting.jooq.tables.pojos.Repair> fetchByOrderId(Long... values) {
        return fetch(Repair.REPAIR.ORDER_ID, values);
    }

    /**
     * Fetch records that have <code>master_id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<io.skai.accounting.jooq.tables.pojos.Repair> fetchRangeOfMasterId(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(Repair.REPAIR.MASTER_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>master_id IN (values)</code>
     */
    public List<io.skai.accounting.jooq.tables.pojos.Repair> fetchByMasterId(Long... values) {
        return fetch(Repair.REPAIR.MASTER_ID, values);
    }

    /**
     * Fetch records that have <code>result BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<io.skai.accounting.jooq.tables.pojos.Repair> fetchRangeOfResult(String lowerInclusive, String upperInclusive) {
        return fetchRange(Repair.REPAIR.RESULT, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>result IN (values)</code>
     */
    public List<io.skai.accounting.jooq.tables.pojos.Repair> fetchByResult(String... values) {
        return fetch(Repair.REPAIR.RESULT, values);
    }

    /**
     * Fetch records that have <code>sum BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<io.skai.accounting.jooq.tables.pojos.Repair> fetchRangeOfSum(Double lowerInclusive, Double upperInclusive) {
        return fetchRange(Repair.REPAIR.SUM, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>sum IN (values)</code>
     */
    public List<io.skai.accounting.jooq.tables.pojos.Repair> fetchBySum(Double... values) {
        return fetch(Repair.REPAIR.SUM, values);
    }

    /**
     * Fetch records that have <code>comment BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<io.skai.accounting.jooq.tables.pojos.Repair> fetchRangeOfComment(String lowerInclusive, String upperInclusive) {
        return fetchRange(Repair.REPAIR.COMMENT, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>comment IN (values)</code>
     */
    public List<io.skai.accounting.jooq.tables.pojos.Repair> fetchByComment(String... values) {
        return fetch(Repair.REPAIR.COMMENT, values);
    }

    /**
     * Fetch records that have <code>guid BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<io.skai.accounting.jooq.tables.pojos.Repair> fetchRangeOfGuid(String lowerInclusive, String upperInclusive) {
        return fetchRange(Repair.REPAIR.GUID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>guid IN (values)</code>
     */
    public List<io.skai.accounting.jooq.tables.pojos.Repair> fetchByGuid(String... values) {
        return fetch(Repair.REPAIR.GUID, values);
    }

    /**
     * Fetch a unique record that has <code>guid = value</code>
     */
    public io.skai.accounting.jooq.tables.pojos.Repair fetchOneByGuid(String value) {
        return fetchOne(Repair.REPAIR.GUID, value);
    }

    /**
     * Fetch a unique record that has <code>guid = value</code>
     */
    public Optional<io.skai.accounting.jooq.tables.pojos.Repair> fetchOptionalByGuid(String value) {
        return fetchOptional(Repair.REPAIR.GUID, value);
    }
}
