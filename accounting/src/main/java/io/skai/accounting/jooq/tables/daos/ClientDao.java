/*
 * This file is generated by jOOQ.
 */
package io.skai.accounting.jooq.tables.daos;


import io.skai.accounting.jooq.tables.Client;
import io.skai.accounting.jooq.tables.records.ClientRecord;

import java.util.List;
import java.util.Optional;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ClientDao extends DAOImpl<ClientRecord, io.skai.accounting.jooq.tables.pojos.Client, Long> {

    /**
     * Create a new ClientDao without any configuration
     */
    public ClientDao() {
        super(Client.CLIENT, io.skai.accounting.jooq.tables.pojos.Client.class);
    }

    /**
     * Create a new ClientDao with an attached configuration
     */
    public ClientDao(Configuration configuration) {
        super(Client.CLIENT, io.skai.accounting.jooq.tables.pojos.Client.class, configuration);
    }

    @Override
    public Long getId(io.skai.accounting.jooq.tables.pojos.Client object) {
        return object.getId();
    }

    /**
     * Fetch records that have <code>id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<io.skai.accounting.jooq.tables.pojos.Client> fetchRangeOfId(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(Client.CLIENT.ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    public List<io.skai.accounting.jooq.tables.pojos.Client> fetchById(Long... values) {
        return fetch(Client.CLIENT.ID, values);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public io.skai.accounting.jooq.tables.pojos.Client fetchOneById(Long value) {
        return fetchOne(Client.CLIENT.ID, value);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public Optional<io.skai.accounting.jooq.tables.pojos.Client> fetchOptionalById(Long value) {
        return fetchOptional(Client.CLIENT.ID, value);
    }

    /**
     * Fetch records that have <code>name BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<io.skai.accounting.jooq.tables.pojos.Client> fetchRangeOfName(String lowerInclusive, String upperInclusive) {
        return fetchRange(Client.CLIENT.NAME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>name IN (values)</code>
     */
    public List<io.skai.accounting.jooq.tables.pojos.Client> fetchByName(String... values) {
        return fetch(Client.CLIENT.NAME, values);
    }

    /**
     * Fetch records that have <code>email BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<io.skai.accounting.jooq.tables.pojos.Client> fetchRangeOfEmail(String lowerInclusive, String upperInclusive) {
        return fetchRange(Client.CLIENT.EMAIL, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>email IN (values)</code>
     */
    public List<io.skai.accounting.jooq.tables.pojos.Client> fetchByEmail(String... values) {
        return fetch(Client.CLIENT.EMAIL, values);
    }

    /**
     * Fetch a unique record that has <code>email = value</code>
     */
    public io.skai.accounting.jooq.tables.pojos.Client fetchOneByEmail(String value) {
        return fetchOne(Client.CLIENT.EMAIL, value);
    }

    /**
     * Fetch a unique record that has <code>email = value</code>
     */
    public Optional<io.skai.accounting.jooq.tables.pojos.Client> fetchOptionalByEmail(String value) {
        return fetchOptional(Client.CLIENT.EMAIL, value);
    }
}
