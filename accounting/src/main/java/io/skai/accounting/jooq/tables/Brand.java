/*
 * This file is generated by jOOQ.
 */
package io.skai.accounting.jooq.tables;


import io.skai.accounting.jooq.Keys;
import io.skai.accounting.jooq.MobileAccounting;
import io.skai.accounting.jooq.tables.records.BrandRecord;

import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function2;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Brand extends TableImpl<BrandRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>mobile_accounting.brand</code>
     */
    public static final Brand BRAND = new Brand();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<BrandRecord> getRecordType() {
        return BrandRecord.class;
    }

    /**
     * The column <code>mobile_accounting.brand.id</code>.
     */
    public final TableField<BrandRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>mobile_accounting.brand.name</code>.
     */
    public final TableField<BrandRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    private Brand(Name alias, Table<BrandRecord> aliased) {
        this(alias, aliased, null);
    }

    private Brand(Name alias, Table<BrandRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>mobile_accounting.brand</code> table reference
     */
    public Brand(String alias) {
        this(DSL.name(alias), BRAND);
    }

    /**
     * Create an aliased <code>mobile_accounting.brand</code> table reference
     */
    public Brand(Name alias) {
        this(alias, BRAND);
    }

    /**
     * Create a <code>mobile_accounting.brand</code> table reference
     */
    public Brand() {
        this(DSL.name("brand"), null);
    }

    public <O extends Record> Brand(Table<O> child, ForeignKey<O, BrandRecord> key) {
        super(child, key, BRAND);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : MobileAccounting.MOBILE_ACCOUNTING;
    }

    @Override
    public Identity<BrandRecord, Long> getIdentity() {
        return (Identity<BrandRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<BrandRecord> getPrimaryKey() {
        return Keys.KEY_BRAND_PRIMARY;
    }

    @Override
    public List<UniqueKey<BrandRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.KEY_BRAND_NAME);
    }

    @Override
    public Brand as(String alias) {
        return new Brand(DSL.name(alias), this);
    }

    @Override
    public Brand as(Name alias) {
        return new Brand(alias, this);
    }

    @Override
    public Brand as(Table<?> alias) {
        return new Brand(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Brand rename(String name) {
        return new Brand(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Brand rename(Name name) {
        return new Brand(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Brand rename(Table<?> name) {
        return new Brand(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<Long, String> fieldsRow() {
        return (Row2) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function2<? super Long, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function2<? super Long, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
