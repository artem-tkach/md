rootProject.name = 'md'
include 'accounting',
        'notification',
        'warehouse'

def springVersion = '3.0.5'
def mapStructVersion = '1.5.3.Final'
def testContainersVersion = '1.18.0'
def jooqVersion = '3.16.3'
def cucumberVersion = '7.12.0'

dependencyResolutionManagement {
    versionCatalogs {
        libs {
            library('openapi', 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.0.4')
            library('springConfigurationProcessor', "org.springframework.boot:spring-boot-configuration-processor:$springVersion")
            library('springValidation',"org.springframework.boot:spring-boot-starter-validation:$springVersion")
            library('springBootWeb',"org.springframework.boot:spring-boot-starter-web:$springVersion")
            library('springTests', "org.springframework.boot:spring-boot-starter-test:$springVersion")
            library('redis', "org.springframework.boot:spring-boot-starter-data-redis:$springVersion")
            library('springMail', "org.springframework.boot:spring-boot-starter-mail:$springVersion")
            library('jpa', "org.springframework.boot:spring-boot-starter-data-jpa:$springVersion")
            library('springJooq', "org.springframework.boot:spring-boot-starter-jooq:$springVersion")
            library('jooq', "org.jooq:jooq:$jooqVersion")
            library('jooqCodegen', "org.jooq:jooq-codegen:$jooqVersion")
            library('lombok', 'org.projectlombok:lombok:1.18.26')
            library('mysql', 'com.mysql:mysql-connector-j:8.0.32')
            library('mapstruct', "org.mapstruct:mapstruct:$mapStructVersion")
            library('mapstructAnnotationProcessor', "org.mapstruct:mapstruct-processor:$mapStructVersion")
            library('kafka', "org.springframework.kafka:spring-kafka:$springVersion")
            library('liquibase', 'org.liquibase:liquibase-core:4.20.0')
            library('openfeign', 'org.springframework.cloud:spring-cloud-starter-openfeign:4.0.2')
            library('assertJ', 'org.assertj:assertj-core:3.24.2')
            library('hamcrest', 'org.hamcrest:hamcrest:2.2')
            library('persistanceLayer','com.kenshoo:persistence-layer:0.1.111-jooq-3.16.3')
            library('testcontainers', "org.testcontainers:testcontainers:$testContainersVersion")
            library('testContainersJupiter',"org.testcontainers:junit-jupiter:$testContainersVersion")
            library('testContainersMySQL',"org.testcontainers:mysql:$testContainersVersion")
            library('testContainersKafka', "org.testcontainers:kafka:$testContainersVersion")
            library('wireMock','com.github.tomakehurst:wiremock:3.0.0-beta-8')
            library('contractStubRunner','org.springframework.cloud:spring-cloud-starter-contract-stub-runner:4.0.2')
            library('guava', 'com.google.guava:guava:31.1-jre')
            library('cucumberJava', "io.cucumber:cucumber-java:$cucumberVersion")
            library('cucumberSpring',"io.cucumber:cucumber-spring:$cucumberVersion")
            library('cucmberJuplier', "io.cucumber:cucumber-junit-platform-engine:$cucumberVersion")
        }
    }
}